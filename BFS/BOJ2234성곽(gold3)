/*
시간복잡도:O(N*M)
공간복잡도:O(N*M)

비트마스킹과 BFS를 이용해 문제르 푼다.
비트마스킹을 이용해 하나하나 벽을 제거해보며 어떨때 가장 큰넓이가 나오는지 확인해본다.
*/

#include <iostream>
#include <algorithm>
#include <queue>
#include <stack>
#include <vector>
#define Y first
#define X second
using namespace std;
int dy[] = { 0,-1,0,1 };
int dx[] = { -1,0,1,0 };//서 북 동 남 순서
int M, N;
int map[51][51];
int visited[51][51];
int newMap[51][51];
int wall(int roomNum, int dir) {//방의 번호와 네 방향 0서1 북 2동 3남
	return (roomNum >> dir) & 1;//막혀있으면 1반납 안막혀있으면 0반납
}
pair<int, int> findRoom() {//탐색안한 방찾기
	for (int y = 0; y < M; y++) {
		for (int x = 0; x < N; x++) {
			if (newMap[y][x] == 0) {
				return make_pair(y, x);
			}
		}
	}
	return { -1,-1 };
}
int main() {
	cin >> N >> M;
	for (int y = 0; y < M; y++)//row
	{
		for (int x = 0; x < N; x++)//column
		{
			cin >> map[y][x];
		}
	}
	pair<int, int> room = findRoom();
	int cnt = 1;
	while (room != make_pair(-1, -1)) {
		queue<pair<int, int>> q;
		q.push(room);
		while (!q.empty()) {
			pair<int, int> cur = q.front();
			q.pop();
			newMap[cur.Y][cur.X] = cnt;
				for (int i = 0; i < 4; i++) {//
					int nx = cur.X + dx[i];
					int ny = cur.Y + dy[i];
					if (nx < 0 || nx >= N || ny < 0 || ny >= M)continue;
					if (wall(map[cur.Y][cur.X], i))continue;//벽이있으면 가지않는다
					if (newMap[ny][nx])continue;//방문기록이 있으면 가지않는다
					newMap[ny][nx] = cnt; 
					q.push({ ny,nx });
				}
		}
		cnt++;
		room = findRoom();
	}//cnt는 방의 수보다 1개 더 크게 된다.
	vector<int> countRoom(cnt);//각각룸의 수//0이아닌 1부터 방을 인덱싱하기 위해 cnt넣음 
	for (int i = 0; i < M; i++) {
		for (int m = 0; m < N; m++) {
			countRoom[newMap[i][m]]++;
		}
	}
	int biggistRoom = 0;//제일 넓은 방을 찾는다
	for (int i = 1; i < cnt; i++) {
		if (biggistRoom < countRoom[i])biggistRoom=countRoom[i];
	}
	int room1;
	int room2;
	int linkIt = 0;
	for (int y = 0; y < M; y++) {
		for (int x = 0; x < N; x++) {
			for (int i = 0; i < 4; i++) {
				int ny = dy[i] + y;
				int nx = dx[i] + x;
				if (nx < 0 || ny < 0 || nx >= N || ny >= M)continue;
				if (newMap[ny][nx] == newMap[y][x])continue;
				int newNum = countRoom[newMap[ny][nx]] + countRoom[newMap[y][x]];
				if (linkIt < newNum) {
					room1 = linkIt = newNum;
				}
			}
		}
	}
	cout << cnt-1 << "\n"<< biggistRoom << "\n" << linkIt;
}
