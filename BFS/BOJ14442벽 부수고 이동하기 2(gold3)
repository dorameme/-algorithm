*
시간복잡도:O(N*M)
공간복잡도:O(N*M)
풀이: 벽을 한번까지 부수며 이동할수있다 최소거리로 갈때 그 거리를 구하면되므로
visit을 3차원 배열로 만들어 현재위치와 부순횟수를 저장해가며  dp+BFS 로 풀어준다.
*/
#include <vector>
#include <map>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;

#define X first
#define Y second

int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
const int MX = 1001;
int N, M, K;
string keystr;
char board[MX][MX];
int vis[MX][MX][11];
int answer = 987654321;
int main(void) {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin >> N >> M >> K;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++)
		{
			cin >> board[i][j];
		}
	}
	vis[0][0][0] = 1;
	int move = 1;
	queue <pair<pair<int, int>, pair<int, int>>> q;
	q.push({ { 0,0 },{0, move } });
	while (!q.empty()) {
		pair<pair<int, int>, pair<int, int>>cur = q.front();
		q.pop();
		if (cur.X.X == N - 1 && cur.X.Y == M - 1) {
			if (answer > cur.Y.Y)
				answer = cur.Y.Y;
		}
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.X.X;
			int ny = dy[i] + cur.X.Y;
			if (nx < 0 || ny < 0 || nx >= N || ny >= M)continue;
			if (board[nx][ny] == '1') {
			if (vis[nx][ny][cur.Y.X+1])continue;
				if (cur.Y.X+1 > K) continue;
				else {
					vis[nx][ny][cur.Y.X+1] = 1;
					q.push({ { nx, ny }, {cur.Y.X + 1 ,cur.Y.Y + 1} });
				}
			}
			else {
			if (vis[nx][ny][cur.Y.X])continue;
				vis[nx][ny][cur.Y.X]= 1;
				q.push({ { nx, ny }, {cur.Y.X, cur.Y.Y + 1} });
			}
		}
	}
	if (answer == 987654321)cout << -1;
	else cout << answer;
}
