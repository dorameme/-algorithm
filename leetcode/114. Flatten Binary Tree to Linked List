/*
시간복잡도:O(N)-> 모드노드에서 점점 안으로 들어가는 형태로 모든노드를 한번만 방문한다.
공간복잡도:O(1)
풀이: recursive 하게 풀이를 짰다.


*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void flatten(TreeNode* root) {
        if(!root)return ;
        flatten(root->left);///왼쪽에대해서 다 정리되면 오른쪽에대해서도 정리
        flatten(root->right);
        if(root!=NULL){
            TreeNode* temp=root;
            if(root->left){
                TreeNode*node=root->left;
                while(node->right){
                    node=node->right;
                }
                if(root->right){
                    node->right=root->right;
                }
                root->right=root->left;
                root->left=NULL;
                while(root->left==NULL&&root->right){

                    root=root->right;
                }
            }
        }  
    }
};
