/*
25. Reverse Nodes in k-Group
시간복잡도:O(N)
공간복잡도:O(N)
풀이: 링크드리스트를 순회하며 값을 스택에 하나씩 넣어주되, 스택의 크기가 k 가 되면 링크드리스트의 값을 거꾸로 바꾸어준다.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        vector <int> v;
        ListNode* helper=head;
        ListNode* remember=head;
        int n=0;
        stack <int> stk;
        while(head!=NULL){
            stk.push(head->val);
            head=head->next;
            n++;
            if(n==k){
                n=0;
                while(!stk.empty()){
                helper->val=stk.top();
                stk.pop();
                helper=helper->next;
                }
            }
        }
        return remember;
    }
};
