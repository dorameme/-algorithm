/*
시간복잡도:O(N)
공간복잡도:O(lgN)-> 깊이에 따라 하나씩만 검출하므로 
풀이: 계속 밑으로 트리르 타고내려가는데 특정 깊이에 제일 먼저 도착한 노드만 검출한다.
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
vector <int> answer;
int visit[101];
    void solve(int deep,TreeNode*root){
        if(root){
            if(!visit[deep])
            {
                answer.push_back(root->val);
                visit[deep]=1;
            }if(root->right){
                solve(deep+1,root->right);   
            }
            if(root->left){
               solve(deep+1,root->left);
            }                
        }
    }
    vector<int> rightSideView(TreeNode* root) {
        if(root){
            solve(0,root);
        }
        return answer;
    }
};
