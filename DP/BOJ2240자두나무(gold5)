/*
2022-09-21
start: 12:00
end:12:30
시간복잡도:(O(T*W)) T는 시간 W는 이동가능횟수 2자리가있으니 2*T*W
공간복잡도:(O(T*W))
point-> 자두나무에서 시간과 위치만을 기록할 뿐만아니라 반드시 몇번움직여서 도달하였는지도 배열에 dp로 넣어줘야한다!! 
*/
#include <iostream>
#include <algorithm>
#include <queue>
#include <set>
#include <vector>
#include <cstring>
#define X first
#define Y second
using namespace std;
int fruit[1001];
int answer = 0;
int cnt[3][1001][1001];
int T, W;
int change(int stand) {
	return (stand == 1) ? 2 : 1;
}
int dp(int stand, int time, int move) {
	if (cnt[stand][time][move]>0)return cnt[stand][time][move];
	if (time > T)return 0;
	int get_it = (fruit[time] == (stand)) ? 1 : 0;
	if (move == 0) {
		return cnt[stand][time][move] = dp(stand, time + 1, move) + get_it;
	}
	else {
		return cnt[stand][time][move] = max({ dp(change(stand), time + 1, move - 1),dp(stand, time + 1, move) }) + get_it;
	}
}
int main() {
	cin >> T >> W;
	int num;
	for (int i = 1; i <= T; i++) {
		cin >> fruit[i];
	}
	int answer = 0;
	if (W >= 1)
		answer = max({ dp(1, 1, W),dp(2,1,W - 1) });
	else {
		answer = dp(1, 1, 0);
	}
	cout << answer;
}
